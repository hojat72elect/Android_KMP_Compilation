

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'com.squareup.anvil'
    id 'com.google.devtools.ksp'
}

apply from: "$rootProject.projectDir/gradle/android-library.gradle"

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

dependencies {
    implementation project(":app-build-config-api")
    implementation project(":malicious-site-protection-api")
    implementation project(':browser-api')

    anvil project(path: ':anvil-compiler')
    implementation project(path: ':anvil-annotations')
    implementation project(path: ':di')
    ksp AndroidX.room.compiler
    implementation AndroidX.room.runtime
    implementation AndroidX.room.ktx

    implementation KotlinX.coroutines.android
    implementation AndroidX.core.ktx
    implementation AndroidX.work.runtimeKtx
    implementation Google.dagger

    implementation project(path: ':common-utils')

    implementation "com.squareup.logcat:logcat:_"
    implementation JakeWharton.timber

    implementation Google.android.material

    implementation project(path: ':statistics-api')

    testImplementation AndroidX.test.ext.junit
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2'
    testImplementation Testing.junit4
    testImplementation "org.mockito.kotlin:mockito-kotlin:_"
    testImplementation project(path: ':common-test')
    testImplementation CashApp.turbine
    testImplementation Testing.robolectric
    testImplementation project(':feature-toggles-test')
    testImplementation(KotlinX.coroutines.test) {
        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023
        // conflicts with mockito due to direct inclusion of byte buddy
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }
    testImplementation AndroidX.work.testing

    coreLibraryDesugaring Android.tools.desugarJdkLibs
}

ext {
    MALICIOUS_SITE_PROTECTION_AUTH_TOKEN =
            localProperties.getProperty('MALICIOUS_SITE_PROTECTION_AUTH_TOKEN')
                    ?: System.getenv('MALICIOUS_SITE_PROTECTION_AUTH_TOKEN')
}

android {
    namespace "com.duckduckgo.malicioussiteprotection.impl"
    anvil {
        generateDaggerFactories = true // default is false
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled = true
    }
    defaultConfig {
        buildConfigField "String", "MALICIOUS_SITE_PROTECTION_AUTH_TOKEN", "\"${MALICIOUS_SITE_PROTECTION_AUTH_TOKEN}\""
    }
}
