<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ClassOrdering:AboutFragment.kt$AboutFragment$Companion</ID>
    <ID>ClassOrdering:Alias.kt$Alias$@IgnoredOnParcel private var _creationString: String? = null</ID>
    <ID>ClassOrdering:Alias.kt$Alias$@IgnoredOnParcel private var _latestActivityString: String? = null</ID>
    <ID>ClassOrdering:Alias.kt$Alias$@IgnoredOnParcel private var _mailboxesString: Spannable? = null</ID>
    <ID>ClassOrdering:Alias.kt$Alias$@IgnoredOnParcel private var _preciseCreationString: String? = null</ID>
    <ID>ClassOrdering:Alias.kt$Alias$fun setEnabled(enabled: Boolean)</ID>
    <ID>ClassOrdering:Alias.kt$Alias$fun setMailboxes(context: Context, mailboxes: List&lt;AliasMailbox&gt;)</ID>
    <ID>ClassOrdering:Alias.kt$Alias$fun setName(name: String?)</ID>
    <ID>ClassOrdering:Alias.kt$Alias$fun setNote(note: String?)</ID>
    <ID>ClassOrdering:AliasActivity.kt$AliasActivity$override val email: String get() = when (action) { Action.REPLY -&gt; to else -&gt; from }</ID>
    <ID>ClassOrdering:AliasActivityHeaderViewHolder.kt$AliasActivityHeaderViewHolder$Companion</ID>
    <ID>ClassOrdering:AliasActivityListViewModel.kt$AliasActivityListViewModel$// Mailboxes private var _isUpdatingMailboxes: Boolean = false</ID>
    <ID>ClassOrdering:AliasActivityListViewModel.kt$AliasActivityListViewModel$// Metadata: mailboxes, name &amp; note private val _eventUpdateMetadata = MutableLiveData&lt;Boolean&gt;()</ID>
    <ID>ClassOrdering:AliasActivityListViewModel.kt$AliasActivityListViewModel$// Name private var _isUpdatingName: Boolean = false</ID>
    <ID>ClassOrdering:AliasActivityListViewModel.kt$AliasActivityListViewModel$// Note private var _isUpdatingNote: Boolean = false</ID>
    <ID>ClassOrdering:AliasActivityListViewModel.kt$AliasActivityListViewModel$fun onHandleErrorComplete()</ID>
    <ID>ClassOrdering:AliasActivityListViewModel.kt$AliasActivityListViewModel$val eventUpdateMetadata: LiveData&lt;Boolean&gt; get() = _eventUpdateMetadata</ID>
    <ID>ClassOrdering:AliasActivityViewHolder.kt$AliasActivityViewHolder$Companion</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$// Filter var aliasFilterMode = AliasFilterMode.ALL private set</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$// Handle mailto email private var _shouldActionOnMailToEmail = MutableLiveData&lt;Boolean&gt;()</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$// Save scrolling position private var _lastScrollingPosition: Int = 0</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$// Show pricing var needsShowPricing = false private set</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$// Toggle private var _toggledAliasIndex = MutableLiveData&lt;Int&gt;()</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$fun onHandleErrorComplete()</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$private var _createdContact = MutableLiveData&lt;Contact&gt;()</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$private var _mailFromAlias = MutableLiveData&lt;Alias&gt;()</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$val createdContact: LiveData&lt;Contact&gt; get() = _createdContact</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$val mailFromAlias: LiveData&lt;Alias&gt; get() = _mailFromAlias</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$val shouldActionOnMailToEmail: LiveData&lt;Boolean&gt; get() = _shouldActionOnMailToEmail</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$val toggledAliasIndex: LiveData&lt;Int&gt; get() = _toggledAliasIndex</ID>
    <ID>ClassOrdering:AliasListViewModel.kt$AliasListViewModel$var mailToEmail: String? = null private set</ID>
    <ID>ClassOrdering:AliasLiteViewHolder.kt$AliasLiteViewHolder$fun bind(alias: Alias, clickListener: AliasPickerAdapter.ClickListener)</ID>
    <ID>ClassOrdering:AliasSearchViewModel.kt$AliasSearchViewModel$fun deleteAlias(alias: Alias)</ID>
    <ID>ClassOrdering:AliasSearchViewModel.kt$AliasSearchViewModel$fun forceUpdateResults()</ID>
    <ID>ClassOrdering:AliasSearchViewModel.kt$AliasSearchViewModel$fun onHandleErrorComplete()</ID>
    <ID>ClassOrdering:AliasSearchViewModel.kt$AliasSearchViewModel$fun onHandleUpdateResultsComplete()</ID>
    <ID>ClassOrdering:AliasSearchViewModel.kt$AliasSearchViewModel$fun search(searchTerm: String? = null)</ID>
    <ID>ClassOrdering:AliasViewHolder.kt$AliasViewHolder$Companion</ID>
    <ID>ClassOrdering:AvatarView.kt$AvatarView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) }</ID>
    <ID>ClassOrdering:AvatarView.kt$AvatarView$private val binding = LayoutAvatarViewBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:ConnectWithProtonView.kt$ConnectWithProtonView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) }</ID>
    <ID>ClassOrdering:ConnectWithProtonView.kt$ConnectWithProtonView$private val binding = LayoutConnectWithProtonViewBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:Contact.kt$Contact$private var _lastEmailSentString: String? = null</ID>
    <ID>ClassOrdering:ContactListFragment.kt$ContactListFragment$Companion</ID>
    <ID>ClassOrdering:ContactListViewModel.kt$ContactListViewModel$// Toggle private var _eventFinishTogglingContact = MutableLiveData&lt;Boolean&gt;()</ID>
    <ID>ClassOrdering:ContactListViewModel.kt$ContactListViewModel$fun create(email: String)</ID>
    <ID>ClassOrdering:ContactListViewModel.kt$ContactListViewModel$fun fetchContacts()</ID>
    <ID>ClassOrdering:ContactListViewModel.kt$ContactListViewModel$fun onHandleCreatedContactComplete()</ID>
    <ID>ClassOrdering:ContactListViewModel.kt$ContactListViewModel$fun onHandleErrorComplete()</ID>
    <ID>ClassOrdering:ContactListViewModel.kt$ContactListViewModel$fun onHandleFinishCallingCreateContactComplete()</ID>
    <ID>ClassOrdering:ContactListViewModel.kt$ContactListViewModel$fun onHandleFinishCallingDeleteContactComplete()</ID>
    <ID>ClassOrdering:ContactListViewModel.kt$ContactListViewModel$fun refreshContacts()</ID>
    <ID>ClassOrdering:ContactListViewModel.kt$ContactListViewModel$val eventFinishTogglingContact: LiveData&lt;Boolean&gt; get() = _eventFinishTogglingContact</ID>
    <ID>ClassOrdering:ContactViewHolder.kt$ContactViewHolder$fun bind(contact: Contact, clickListener: ContactListAdapter.ClickListener)</ID>
    <ID>ClassOrdering:ContactsAccessView.kt$ContactsAccessView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) binding.accessSwitch.setOnClickListener { updateSwitchState() val appSettingsIntent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply { data = Uri.fromParts("package", context.packageName, null) addFlags(Intent.FLAG_ACTIVITY_NEW_TASK) } context.startActivity(appSettingsIntent) } }</ID>
    <ID>ClassOrdering:ContactsAccessView.kt$ContactsAccessView$private val binding = LayoutContactsAccessViewBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:DeleteAccountView.kt$DeleteAccountView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) }</ID>
    <ID>ClassOrdering:DeleteAccountView.kt$DeleteAccountView$private val binding = LayoutDeleteAccountBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:ForceDarkModeCardView.kt$ForceDarkModeCardView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) }</ID>
    <ID>ClassOrdering:ForceDarkModeCardView.kt$ForceDarkModeCardView$private val binding = LayoutForceDarkModeCardViewBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:HomeActivity.kt$HomeActivity$Companion</ID>
    <ID>ClassOrdering:LocalAuthenticationView.kt$LocalAuthenticationView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) }</ID>
    <ID>ClassOrdering:LocalAuthenticationView.kt$LocalAuthenticationView$private val binding = LayoutLocalAuthenticationBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:LoginActivity.kt$LoginActivity$Companion</ID>
    <ID>ClassOrdering:Mailbox.kt$Mailbox$private var _aliasCountString: String? = null</ID>
    <ID>ClassOrdering:MailboxListFragment.kt$MailboxListFragment$Companion</ID>
    <ID>ClassOrdering:MailboxListViewModel.kt$MailboxListViewModel$// Create mailbox private var _createdMailbox = MutableLiveData&lt;String&gt;()</ID>
    <ID>ClassOrdering:MailboxListViewModel.kt$MailboxListViewModel$fun onHandleErrorComplete()</ID>
    <ID>ClassOrdering:MailboxListViewModel.kt$MailboxListViewModel$val createdMailbox: LiveData&lt;String&gt; get() = _createdMailbox</ID>
    <ID>ClassOrdering:MailboxViewHolder.kt$MailboxViewHolder$fun bind(mailbox: Mailbox)</ID>
    <ID>ClassOrdering:NewslettersCardView.kt$NewslettersCardView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) }</ID>
    <ID>ClassOrdering:NewslettersCardView.kt$NewslettersCardView$private val binding = LayoutNewslettersCardViewBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:ProfileInfoCardView.kt$ProfileInfoCardView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) }</ID>
    <ID>ClassOrdering:ProfileInfoCardView.kt$ProfileInfoCardView$private val binding = LayoutProfileInfoCardViewBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:RandomAliasCardView.kt$RandomAliasCardView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) }</ID>
    <ID>ClassOrdering:RandomAliasCardView.kt$RandomAliasCardView$private val binding = LayoutRandomAliasCardViewBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:SLSharedPreferences.kt$SLSharedPreferences$//region API KEY private const val API_KEY = "API_KEY"</ID>
    <ID>ClassOrdering:SLSharedPreferences.kt$SLSharedPreferences$//region API URL private const val API_URL = "API_URL"</ID>
    <ID>ClassOrdering:SLSharedPreferences.kt$SLSharedPreferences$//region DARK MODE private const val FORCE_DARK_MODE = "FORCE_DARK_MODE"</ID>
    <ID>ClassOrdering:SLSharedPreferences.kt$SLSharedPreferences$//region LOCAL AUTHENTICATION private const val SHOULD_LOCALLY_AUTHENTICATE = "SHOULD_LOCALLY_AUTHENTICATE"</ID>
    <ID>ClassOrdering:SLSharedPreferences.kt$SLSharedPreferences$//region RATED private const val RATED = "RATED"</ID>
    <ID>ClassOrdering:SLSharedPreferences.kt$SLSharedPreferences$private const val defaultApiUrl = "https://app.simplelogin.io"</ID>
    <ID>ClassOrdering:SenderAddressFormatCardView.kt$SenderAddressFormatCardView$init { background = ContextCompat.getDrawable(context, android.R.color.transparent) }</ID>
    <ID>ClassOrdering:SenderAddressFormatCardView.kt$SenderAddressFormatCardView$private val binding = LayoutSenderAddressFormatCardViewBinding.inflate(LayoutInflater.from(context), this, true)</ID>
    <ID>ClassOrdering:SenderAddressFormatCardView.kt$SenderAddressFormatCardView$private val senderFormats = listOf(A, AT)</ID>
    <ID>ClassOrdering:SettingsFragment.kt$SettingsFragment$// Registers a photo picker activity launcher in single-select mode. private val pickMedia = registerForActivityResult(PickVisualMedia()) { uri -&gt; // Callback is invoked after the user selects a media item or closes the // photo picker. uri?.let { onPhotoSelected(it) } ?: Toast.makeText(requireContext(), "No media selected", Toast.LENGTH_SHORT).show() }</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$// DomainLite list private var _domainLites = listOf&lt;DomainLite&gt;()</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$// Unlink Proton account private val _eventProtonAccountUnlinked = MutableLiveData&lt;Boolean&gt;()</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$// UserSettings lateinit var userSettings: UserSettings private set</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$fun onHandleErrorComplete()</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$private val _evenUserSettingsUpdated = MutableLiveData&lt;Boolean&gt;()</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$private var _isFetching = MutableLiveData&lt;Boolean&gt;()</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$val domainLites: List&lt;DomainLite&gt; get() = _domainLites</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$val evenUserSettingsUpdated: LiveData&lt;Boolean&gt; get() = _evenUserSettingsUpdated</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$val eventProtonAccountUnlinked: LiveData&lt;Boolean&gt; get() = _eventProtonAccountUnlinked</ID>
    <ID>ClassOrdering:SettingsViewModel.kt$SettingsViewModel$val isFetching: LiveData&lt;Boolean&gt; get() = _isFetching</ID>
    <ID>ClassOrdering:SignUpActivity.kt$SignUpActivity$Companion</ID>
    <ID>ClassOrdering:StartupActivity.kt$StartupActivity$Companion</ID>
    <ID>ClassOrdering:SwipeHelper.kt$SwipeHelper.UnderlayButton$Companion</ID>
    <ID>ClassOrdering:VerificationActivity.kt$VerificationActivity$Companion</ID>
    <ID>DataClassShouldBeImmutable:Alias.kt$Alias$@IgnoredOnParcel private var _countSpannableString: Spannable? = null</ID>
    <ID>DataClassShouldBeImmutable:Alias.kt$Alias$@IgnoredOnParcel private var _creationString: String? = null</ID>
    <ID>DataClassShouldBeImmutable:Alias.kt$Alias$@IgnoredOnParcel private var _latestActivityString: String? = null</ID>
    <ID>DataClassShouldBeImmutable:Alias.kt$Alias$@IgnoredOnParcel private var _mailboxesString: Spannable? = null</ID>
    <ID>DataClassShouldBeImmutable:Alias.kt$Alias$@IgnoredOnParcel private var _preciseCreationString: String? = null</ID>
    <ID>DataClassShouldBeImmutable:Alias.kt$Alias$@SerializedName("enabled") private var _enabled: Boolean</ID>
    <ID>DataClassShouldBeImmutable:Alias.kt$Alias$@SerializedName("mailboxes") private var _mailboxes: List&lt;AliasMailbox&gt;</ID>
    <ID>DataClassShouldBeImmutable:Alias.kt$Alias$@SerializedName("name") private var _name: String?</ID>
    <ID>DataClassShouldBeImmutable:Alias.kt$Alias$@SerializedName("note") private var _note: String?</ID>
    <ID>DataClassShouldBeImmutable:AliasActivity.kt$AliasActivity$@IgnoredOnParcel private var _timestampString: String? = null</ID>
    <ID>DataClassShouldBeImmutable:Contact.kt$Contact$@SerializedName("block_forward") var blockForward: Boolean</ID>
    <ID>DataClassShouldBeImmutable:Contact.kt$Contact$private var _creationString: String? = null</ID>
    <ID>DataClassShouldBeImmutable:Contact.kt$Contact$private var _lastEmailSentString: String? = null</ID>
    <ID>DataClassShouldBeImmutable:Mailbox.kt$Mailbox$private var _aliasCountString: String? = null</ID>
    <ID>DataClassShouldBeImmutable:Mailbox.kt$Mailbox$private var _creationString: String? = null</ID>
    <ID>ExpressionBodySyntax:AliasActivityListFragment.kt$AliasActivityListFragment.&lt;no name provided&gt;$return 5f / (displayMetrics?.densityDpi ?: 1)</ID>
    <ID>ExpressionBodySyntax:AliasListFragment.kt$AliasListFragment.&lt;no name provided&gt;$return 5f / (displayMetrics?.densityDpi ?: 1)</ID>
    <ID>FunctionMaxLength:ContactListViewModel.kt$ContactListViewModel$fun onHandleFinishCallingCreateContactComplete()</ID>
    <ID>FunctionMaxLength:ContactListViewModel.kt$ContactListViewModel$fun onHandleFinishCallingDeleteContactComplete()</ID>
    <ID>FunctionMaxLength:SenderAddressFormatCardView.kt$SenderAddressFormatCardView$fun setSenderAddressFormatSpinnerSelectionListener(listener: (SenderFormat) -&gt; Unit)</ID>
    <ID>LongMethod:AboutFragment.kt$AboutFragment$@SuppressLint("SetTextI18n", "LongMethod") override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>MagicNumber:AliasLiteViewHolder.kt$AliasLiteViewHolder$0.8f</ID>
    <ID>MagicNumber:AliasViewHolder.kt$AliasViewHolder$0.8f</ID>
    <ID>MagicNumber:ContactListFragment.kt$ContactListFragment$3</ID>
    <ID>MagicNumber:ContactViewHolder.kt$ContactViewHolder$0.5f</ID>
    <ID>MagicNumber:LoginActivity.kt$LoginActivity$403</ID>
    <ID>MagicNumber:SettingsFragment.kt$SettingsFragment$100</ID>
    <ID>MaxLineLength:Activity.kt$return Intent.createChooser(intent, chooserTitle).putExtra(Intent.EXTRA_EXCLUDE_COMPONENTS, excludedComponentNames.toTypedArray())</ID>
    <ID>MaxLineLength:AliasListFragment.kt$AliasListFragment$findNavController().navigate(AliasListFragmentDirections.actionAliasListFragmentToAliasSearchFragment(AliasSearchMode.DEFAULT))</ID>
    <ID>MaxLineLength:AliasPickerFragment.kt$AliasPickerFragment$// it not, we have to call adapter.notifyDataSetChanged() which breaks the animation. ListAdapter bug?</ID>
    <ID>MaxLineLength:AliasPickerFragment.kt$AliasPickerFragment$class</ID>
    <ID>MaxLineLength:AliasPickerFragment.kt$AliasPickerFragment$findNavController().navigate(AliasPickerFragmentDirections.actionAliasPickerFragmentToAliasSearchFragment(AliasSearchMode.CONTACT_CREATION))</ID>
    <ID>MaxLineLength:AvatarView.kt$AvatarView$binding.cardView.foreground = ContextCompat.getDrawable(context, R.drawable.shape_oval_outline_primary_color)</ID>
    <ID>MaxLineLength:ConnectWithProtonView.kt$ConnectWithProtonView$binding.accountConnectedWithProtonText.text = context.getString(R.string.currently_linked_proton_account, connectedProtonAddress)</ID>
    <ID>MaxLineLength:LocalAuthActivity.kt$LocalAuthActivity$setAllowedAuthenticators(BiometricManager.Authenticators.BIOMETRIC_WEAK or BiometricManager.Authenticators.DEVICE_CREDENTIAL)</ID>
    <ID>MaxLineLength:LoginActivity.kt$LoginActivity$.</ID>
    <ID>MaxLineLength:SettingsFragment.kt$SettingsFragment$Toast.makeText(requireContext(), R.string.your_proton_account_has_been_linked, Toast.LENGTH_SHORT).show()</ID>
    <ID>MaxLineLength:SettingsFragment.kt$SettingsFragment$Toast.makeText(requireContext(), R.string.your_proton_account_has_been_unlinked, Toast.LENGTH_SHORT).show()</ID>
    <ID>ReturnCount:Activity.kt$fun Activity.getIntentChooser( intent: Intent, chooserTitle: CharSequence? = null, filteredPackageNames: List&lt;String&gt; ): Intent?</ID>
    <ID>SpacingBetweenPackageAndImports:DeleteAccountView.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:LoginActivity.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:LoginWithProtonUtils.kt$ </ID>
    <ID>UnusedImports:AliasActivityListFragment.kt$import android.widget.Toast</ID>
    <ID>UnusedImports:HomeActivity.kt$import io.simplelogin.android.utils.SLApiService</ID>
    <ID>UnusedImports:HomeViewModel.kt$import io.simplelogin.android.utils.SLApiService</ID>
    <ID>UnusedImports:HomeViewModel.kt$import io.simplelogin.android.utils.enums.SLError</ID>
    <ID>UnusedImports:LoginActivity.kt$import android.net.Uri</ID>
    <ID>UnusedImports:SettingsFragment.kt$import android.Manifest</ID>
    <ID>UnusedImports:SettingsFragment.kt$import android.app.Activity</ID>
    <ID>UnusedImports:SettingsFragment.kt$import android.content.pm.PackageManager</ID>
    <ID>UnusedImports:SettingsFragment.kt$import io.simplelogin.android.utils.extension.toastShortly</ID>
    <ID>UnusedParameter:SettingsFragment.kt$SettingsFragment$intent: Intent?</ID>
    <ID>VariableMaxLength:ContactListFragment.kt$ContactListFragment.Companion$private const val BOTTOM_SHEET_HEIGHT_PERCENTAGE_TO_SCREEN_HEIGHT = 90.0f / 100</ID>
    <ID>VariableMaxLength:ContactListFragment.kt$ContactListFragment.Companion$private const val DIM_VIEW_ALPHA_PERCENTAGE_TO_SLIDE_OFFSET = 60.0f / 100</ID>
    <ID>VariableMaxLength:LoginActivity.kt$LoginActivity.Companion$private const val BOTTOM_SHEET_HEIGHT_PERCENTAGE_TO_SCREEN_HEIGHT = 90.0f / 100</ID>
    <ID>VariableMaxLength:LoginActivity.kt$LoginActivity.Companion$private const val DIM_VIEW_ALPHA_PERCENTAGE_TO_SLIDE_OFFSET = 60.0f / 100</ID>
    <ID>VariableMaxLength:MailboxListFragment.kt$MailboxListFragment.Companion$private const val BOTTOM_SHEET_HEIGHT_PERCENTAGE_TO_SCREEN_HEIGHT = 90.0f / 100</ID>
    <ID>VariableMaxLength:MailboxListFragment.kt$MailboxListFragment.Companion$private const val DIM_VIEW_ALPHA_PERCENTAGE_TO_SLIDE_OFFSET = 60.0f / 100</ID>
    <ID>VariableNaming:VerificationActivity.kt$VerificationActivity$private val DELAY_AFTER_RESET_MS = 100L</ID>
    <ID>WildcardImport:Activity.kt$import android.content.*</ID>
    <ID>WildcardImport:AliasActivityListFragment.kt$import io.simplelogin.android.utils.extension.*</ID>
    <ID>WildcardImport:AliasCreateFragment.kt$import io.simplelogin.android.utils.extension.*</ID>
    <ID>WildcardImport:AliasListFragment.kt$import androidx.recyclerview.widget.*</ID>
    <ID>WildcardImport:AliasListFragment.kt$import io.simplelogin.android.utils.extension.*</ID>
    <ID>WildcardImport:AliasSearchFragment.kt$import io.simplelogin.android.utils.extension.*</ID>
    <ID>WildcardImport:ContactListFragment.kt$import io.simplelogin.android.utils.extension.*</ID>
    <ID>WildcardImport:ExampleInstrumentedTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:ExampleUnitTest.kt$import org.junit.Assert.*</ID>
    <ID>WildcardImport:LoginActivity.kt$import io.simplelogin.android.utils.enums.*</ID>
    <ID>WildcardImport:LoginActivity.kt$import io.simplelogin.android.utils.extension.*</ID>
    <ID>WildcardImport:MailboxListFragment.kt$import io.simplelogin.android.utils.extension.*</ID>
    <ID>WildcardImport:SLApiService.kt$import io.simplelogin.android.utils.enums.*</ID>
    <ID>WildcardImport:SLApiService.kt$import io.simplelogin.android.utils.model.*</ID>
    <ID>WildcardImport:SLApiService.kt$import okhttp3.*</ID>
    <ID>WildcardImport:SLDateTimeFormatter.kt$import java.util.*</ID>
    <ID>WildcardImport:SenderAddressFormatCardView.kt$import io.simplelogin.android.utils.enums.SenderFormat.*</ID>
    <ID>WildcardImport:SettingsFragment.kt$import android.view.View.*</ID>
    <ID>WildcardImport:ShareActivity.kt$import io.simplelogin.android.utils.extension.*</ID>
    <ID>WildcardImport:SwipeHelper.kt$import android.graphics.*</ID>
    <ID>WildcardImport:SwipeHelper.kt$import java.util.*</ID>
    <ID>WildcardImport:VerificationActivity.kt$import io.simplelogin.android.utils.extension.*</ID>
  </CurrentIssues>
</SmellBaseline>
